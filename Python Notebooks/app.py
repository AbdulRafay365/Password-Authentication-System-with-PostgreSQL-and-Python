# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xjhdr2CetKvyjBijBcPWDNJByIXHNgNh
"""

from auth import signup, login, reset_password, list_users

import gradio as gr

# Password validation helper
import re

def check_password_rules(password):
    rules = {
        "✅ At least 8 characters": len(password) >= 8,
        "✅ 1 uppercase letter": bool(re.search(r"[A-Z]", password)),
        "✅ 1 lowercase letter": bool(re.search(r"[a-z]", password)),
        "✅ 1 number": bool(re.search(r"\d", password)),
        "✅ 1 special character": bool(re.search(r"[!@#$%^&*()_+\-=[\]{}|;:',.<>/?]", password)),
        "✅ No spaces": ' ' not in password,
        "✅ Not a common password": password.lower() not in ['password', '12345678', 'qwerty', 'password123!'],
        "✅ No more than 2 repeating characters": all(password.count(c) <= 2 for c in set(password))
    }
    return "\n".join([k if v else k.replace('✅', '❌') for k, v in rules.items()])

# Toggle password visibility
def toggle_password(show):
    return gr.update(type="text" if show else "password")

# Gradio UI
with gr.Blocks(title="User Authentication System") as demo:
    gr.Markdown("# 🔐 User Authentication System")

    # --- SIGN UP TAB ---
    with gr.Tab("Sign Up"):
        gr.Markdown("### Create a new account")
        with gr.Row():
            with gr.Column():
                signup_username = gr.Textbox(label="Username", placeholder="Choose a username")
                signup_password = gr.Textbox(label="Password", type="password", placeholder="Create a strong password", elem_id="signup_pw")
                show_signup_pw = gr.Checkbox(label="Show Password 👁️")
                password_feedback = gr.Textbox(label="Password Strength Feedback", lines=8, interactive=False)
                signup_btn = gr.Button("Sign Up")
                signup_output = gr.Textbox(label="Result", interactive=False)

        # Dynamic feedback on password input
        signup_password.change(
            check_password_rules,
            inputs=signup_password,
            outputs=password_feedback
        )

        show_signup_pw.change(
            toggle_password,
            inputs=show_signup_pw,
            outputs=signup_password
        )

    # --- LOGIN TAB ---
    with gr.Tab("Log In"):
        gr.Markdown("### Log in to your account")
        with gr.Row():
            with gr.Column():
                login_username = gr.Textbox(label="Username", placeholder="Enter your username")
                login_password = gr.Textbox(label="Password", type="password", placeholder="Enter your password", elem_id="login_pw")
                show_login_pw = gr.Checkbox(label="Show Password 👁️")
                login_btn = gr.Button("Log In")
                login_output = gr.Textbox(label="Result", interactive=False)

        show_login_pw.change(
            toggle_password,
            inputs=show_login_pw,
            outputs=login_password
        )

    # --- FORGOT PASSWORD TAB ---
    with gr.Tab("Forgot Password"):
        gr.Markdown("### Reset your password")
        with gr.Row():
            with gr.Column():
                reset_username = gr.Textbox(label="Username", placeholder="Enter your username to reset")
                reset_btn = gr.Button("Reset Password")
                reset_output = gr.Textbox(label="Result", interactive=False)

    # --- VIEW USERS TAB ---
    with gr.Tab("View Users"):
        gr.Markdown("### Registered Users")
        users_list = gr.Textbox(label="Current Users", interactive=False, lines=10)
        refresh_btn = gr.Button("Refresh List")

    # Event handlers
    signup_btn.click(
        signup,
        inputs=[signup_username, signup_password],
        outputs=signup_output
    )

    login_btn.click(
        login,
        inputs=[login_username, login_password],
        outputs=login_output
    )

    reset_btn.click(
        reset_password,
        inputs=reset_username,
        outputs=reset_output
    )

    refresh_btn.click(
        list_users,
        outputs=users_list
    )

    demo.load(
        list_users,
        outputs=users_list
    )

# Launch the app
if __name__ == "__main__":
    demo.launch()